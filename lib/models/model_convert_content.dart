// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:fluttergithubpro/models/news_top_model_entity.dart';
import 'package:fluttergithubpro/generated/json/news_top_model_entity_helper.dart';
import 'package:fluttergithubpro/models/today_history_model_entity.dart';
import 'package:fluttergithubpro/generated/json/today_history_model_entity_helper.dart';
import 'package:fluttergithubpro/models/repo_items_model_entity.dart';
import 'package:fluttergithubpro/generated/json/repo_items_model_entity_helper.dart';
import 'package:fluttergithubpro/models/today_oil_price_model_entity.dart';
import 'package:fluttergithubpro/generated/json/today_oil_price_model_entity_helper.dart';
import 'package:fluttergithubpro/models/jokes_data_model_entity.dart';
import 'package:fluttergithubpro/generated/json/jokes_data_model_entity_helper.dart';

class JsonConvert<T> {
  T fromJson(Map<String, dynamic> json) {
    return _getFromJson<T>(runtimeType, this, json);
  }

  Map<String, dynamic> toJson() {
    return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
      case NewsTopModelEntity:
        return newsTopModelEntityFromJson(data as NewsTopModelEntity, json) as T;
      case TodayHistoryModelEntity:
        return todayHistoryModelEntityFromJson(data as TodayHistoryModelEntity, json) as T;
      case RepoItemsModelEntity:
        return repoItemsModelEntityFromJson(data as RepoItemsModelEntity, json) as T;
      case RepoItemsModelOwner:
        return repoItemsModelOwnerFromJson(data as RepoItemsModelOwner, json) as T;
      case RepoItemsModelLicense:
        return repoItemsModelLicenseFromJson(data as RepoItemsModelLicense, json) as T;
      case TodayOilPriceModelEntity:
        return todayOilPriceModelEntityFromJson(data as TodayOilPriceModelEntity, json) as T;
      case JokesDataModelEntity:
        return jokesDataModelEntityFromJson(data as JokesDataModelEntity, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
    switch (type) {
      case NewsTopModelEntity:
        return newsTopModelEntityToJson(data as NewsTopModelEntity);
      case TodayHistoryModelEntity:
        return todayHistoryModelEntityToJson(data as TodayHistoryModelEntity);
      case RepoItemsModelEntity:
        return repoItemsModelEntityToJson(data as RepoItemsModelEntity);
      case RepoItemsModelOwner:
        return repoItemsModelOwnerToJson(data as RepoItemsModelOwner);
      case RepoItemsModelLicense:
        return repoItemsModelLicenseToJson(data as RepoItemsModelLicense);
      case TodayOilPriceModelEntity:
        return todayOilPriceModelEntityToJson(data as TodayOilPriceModelEntity);
      case JokesDataModelEntity:
        return jokesDataModelEntityToJson(data as JokesDataModelEntity);    }
    return data as T;
  }
  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {
      case 'NewsTopModelEntity':
      return NewsTopModelEntity().fromJson(json);
      case 'TodayHistoryModelEntity':
      return TodayHistoryModelEntity().fromJson(json);
      case 'RepoItemsModelEntity':
      return RepoItemsModelEntity().fromJson(json);
      case 'RepoItemsModelOwner':
      return RepoItemsModelOwner().fromJson(json);
      case 'RepoItemsModelLicense':
      return RepoItemsModelLicense().fromJson(json);
      case 'TodayOilPriceModelEntity':
      return TodayOilPriceModelEntity().fromJson(json);
      case 'JokesDataModelEntity':
      return JokesDataModelEntity().fromJson(json);    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {
      case 'NewsTopModelEntity':
      return List<NewsTopModelEntity>();
      case 'TodayHistoryModelEntity':
      return List<TodayHistoryModelEntity>();
      case 'RepoItemsModelEntity':
      return List<RepoItemsModelEntity>();
      case 'RepoItemsModelOwner':
      return List<RepoItemsModelOwner>();
      case 'RepoItemsModelLicense':
      return List<RepoItemsModelLicense>();
      case 'TodayOilPriceModelEntity':
      return List<TodayOilPriceModelEntity>();
      case 'JokesDataModelEntity':
      return List<JokesDataModelEntity>();    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}